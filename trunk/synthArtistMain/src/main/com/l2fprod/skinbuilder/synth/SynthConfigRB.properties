contentAreaFilled=Content Area Filled
contentAreaFilled.description=Refer to the javadoc of javax.swing.AbstractButton#contentAreaFilled(boolean) \
for details of how this is used. It is up to the Painter to properly honor this property. 

iconTextGap=Icon Text Gap
iconTextGap.description=Padding between the icon and text. \
Refer to the javadoc of javax.swing.AbstractButton#setIconTextGap(int) for details of how this is used. 

margin=Margin
margin.description=Margin for the Button. \
Refer to the javadoc of javax.swing.AbstractButton#setMargin(java.awt.Insets) for details of how the margin is used

textShiftOffset=Text Shift Offset
textShiftOffset.description=Amount to shift the text and icon, \
along the x and y axis, from where it would normally be layed out. \
This is only used when the button is in a pressed state and does not have a pressed icon.

ArrowButton.size=Preferred Size
ArrowButton.size.description=Preferred size of the arrow button.

CheckBox.icon=Icon
CheckBox.icon.description=Icon used to render the check.

InternalFrame.icon=Icon
InternalFrame.icon.description=Icon drawn representing the system \
icon of the internal frame. If pressed the system menu will be shown.

InternalFrame.maximizeIcon=Maximize Icon
InternalFrame.maximizeIcon.description=Icon drawn to indicate the ability to maximize the internal frame.

InternalFrame.minimizeIcon=Minimize Icon
InternalFrame.minimizeIcon.description=Icon drawn to indicate the ability to restore the internal frame back to its previous state.

InternalFrame.iconifyIcon=Iconify Icon
InternalFrame.iconifyIcon.description=Icon drawn to indicate the ability to minimize the internal frame.

InternalFrame.closeIcon=Close Icon
InternalFrame.closeIcon.description=Icon drawn to indicate the abililty to close the internal frame.
 
RadioButton.icon=Icon
RadioButton.icon.description=Icon used to render the radio indicator.

ToggleButton.icon=Icon
ToggleButton.icon.description=Icon used to render the radio indicator.

#
# JList
#
List.selectionBackground=Selection Background
List.selectionForeground=Selection Foreground

List.rendererUseListColors=Renderer Use List Colors
List.rendererUseListColors.description=If true the renderers state is not updated, and the text colors come from JList's getSelectionBackground and getSelectionForeground methods. If false, the renderer's state is updated and the colors will instead come from the Style.
 
List.rendererUseUIBorder=Renderer Use UI Border
List.rendererUseUIBorder.description=If true setBorder on the renderer will succeed regardless of the border passed in, otherwise setBorder on the renderer will only succeed if it is a Synth Border. 

List.cellHeight=Cell Height
List.cellHeight.description=Cell height of the JList. Is this is -1, setFixedCellHeight is not invoked.

#
# JTabbedPane
#
TabbedPane.tabRunOverlay=Tab Run Overlay
TabbedPane.tabRunOverlay.description=Number of pixels to overlap tabs when there is more than one row. 

TabbedPane.textIconGap=Text Icon Gap
TabbedPane.textIconGap.description=Padding added between the icon and text on a tab. If there is no text or icon this value is not used. 

TabbedPane.selectedTabPadInsets=Pad Insets
TabbedPane.selectedTabPadInsets.description=Extra insets added to the selected tab.

TabbedPane.selectionFollowsFocus=Selection Follows Focus
TabbedPane.selectionFollowsFocus.description=If true the selection of the tabbed pane changes as the user navigates the tabs with a mouse.

#
# JTable
#
Table.gridColor=Grid Color
Table.gridColor.description=Color used for the grid. If null the foreground from the style is used.

Table.rendererUseTableColors=Renderer uses table colors
Table.rendererUseTableColors.description=If true the renderers state is not updated, and the text colors come from JTable's getSelectionBackground and getSelectionForeground methods. If false, the renderer's state is updated and the colors will instead come from the Style.

Table.rendererUseUIBorder=Renderer uses UI border 
Table.rendererUseUIBorder.description=If true setBorder on the renderer will succeed regardless of the border passed in, otherwise setBorder on the renderer will only succeed if it is a Synth Border.
 
Table.rowHeight=Row Height
Table.rowHeight.description=If not -1 setRowHeight is invoked on the JTable.

#
# JTREE
#
Tree.collapsedIcon=Collapsed Icon
Tree.collapsedIcon.description=Icon to use when a node is collapsed.

Tree.expandedIcon=Expanded Icon
Tree.expandedIcon.description=Icon to use when a node has been expanded.

Tree.drawHorizontalLines=Draw Horizontal Lines
Tree.drawHorizontalLines.description=If true nodes have a horizontal connecting them to the leading edge of their parent.

Tree.drawVerticalLines=Draw Vertical Lines
Tree.drawVerticalLines.description=If true a vertical line is drawn down from expanded nodes.

Tree.leftChildIndent=Left Child Indent
Tree.leftChildIndent.description=This plus Tree.rightChildIndent account for the total space, along the y axis, to offset nodes from their parent.

Tree.rightChildIndent=Right Child Indent
Tree.rightChildIndent.description=This plus Tree.leftChildIndent account for the total space, along the y axis, to offset nodes from their parent.

Tree.rowHeight=Row Height
Tree.rowHeight.description=Row height for the Tree.

Tree.scrollsHorizontallyAndVertically=Scrolls Horizontally And Vertically
Tree.scrollsHorizontallyAndVertically.description=If false, if scrolling needs to happen to accomodate cells it will only happen along the vertical axis, if false, scrolling may happen along both the horizontal and vertical axis.

Tree.scrollsOnExpand=Scrolls On Expand
Tree.scrollsOnExpand.description=Whether or not the JTree should scroll when a node is expanded. 